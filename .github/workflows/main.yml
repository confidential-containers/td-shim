on:
  push:
    paths-ignore:
      - "**.md"
  pull_request:
    paths-ignore:
      - "**.md"
  workflow_dispatch:

name: RUN CODE

env:
  AS: nasm
  AR_x86_64_unknown_uefi: llvm-ar
  CC_x86_64_unknown_uefi: clang
  RUST_TOOLCHAIN: nightly-2022-04-07
  TOOLCHAIN_PROFILE: minimal

jobs:
  system_compile:
    name: Compile the final.bin file
    runs-on: ${{ matrix.host_os }}
    timeout-minutes: 30

    strategy:
      matrix:
        host_os:
          - ubuntu-20.04
          - windows-2019
    steps:
      # Install first since it's needed to build NASM
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "10.0"
          directory: ${{ runner.temp }}/llvm

      - name: install NASM
        uses: ilammy/setup-nasm@v1

      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: ${{ env.TOOLCHAIN_PROFILE }}
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          override: true
          components: rust-src

      - name: Cache
        uses: Swatinem/rust-cache@v1

      - name: Run cargo install cargo-xbuild
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-xbuild
      
      - name: Test Shim Crates
        run: make test 

      - name: Build TdShim
        uses: actions-rs/cargo@v1
        with:
          command: xbuild
          args: -p td-shim --target x86_64-unknown-uefi --release --features=main,tdx

      - name: Build image without payload
        run: |
          cargo run -p td-shim-tools --features=td-shim/default --bin td-shim-ld -- target/x86_64-unknown-uefi/release/ResetVector.bin target/x86_64-unknown-uefi/release/td-shim.efi -o target/x86_64-unknown-uefi/release/final.bin
      
      - name: Meta data check
        run: |
          cargo run -p td-shim-tools --bin td-shim-checker -- target/x86_64-unknown-uefi/release/final.bin

      - name: Build PE format payload
        run: |
          cargo xbuild -p td-payload --target x86_64-unknown-uefi --release --features=main,tdx
          cargo run -p td-shim-tools --no-default-features --features=linker --bin td-shim-ld -- target/x86_64-unknown-uefi/release/ResetVector.bin target/x86_64-unknown-uefi/release/td-shim.efi -p target/x86_64-unknown-uefi/release/td-payload.efi -o target/x86_64-unknown-uefi/release/final-pe.bin

      - name: Build Elf format payload
        run: |
          cargo xbuild -p td-payload --target devtools/rustc-targets/x86_64-unknown-none.json --release --features=main,tdx
          cargo run -p td-shim-tools --no-default-features --features=linker --bin td-shim-ld -- target/x86_64-unknown-uefi/release/ResetVector.bin target/x86_64-unknown-uefi/release/td-shim.efi -p target/x86_64-unknown-none/release/td-payload -o target/x86_64-unknown-uefi/release/final-elf.bin

  test:
    name: Test

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: rust-src, llvm-tools-preview

      - name: Run cargo install cargo-xbuild
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-xbuild

      # install QEMU
      - name: Install QEMU (Linux)
        run: sudo apt update && sudo apt install qemu-system-x86
        if: runner.os == 'Linux'

      - name: Install QEMU (Windows)
        run: |
          choco install qemu --version 2021.5.5
          echo "$Env:Programfiles\qemu" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        if: runner.os == 'Windows'
        shell: pwsh
      - name: "Print QEMU Version"
        run: qemu-system-x86_64 --version